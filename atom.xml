<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>不会写代码的架构师不是好程序猿</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.aosabook.cc/"/>
  <updated>2018-08-02T07:27:15.000Z</updated>
  <id>http://blog.aosabook.cc/</id>
  
  <author>
    <name>老曹同学</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Building Cloud Applications with Microserivce Architecture</title>
    <link href="http://blog.aosabook.cc/2018/08/02/Building-Cloud-Applications-with-Microserivce-Architecture/"/>
    <id>http://blog.aosabook.cc/2018/08/02/Building-Cloud-Applications-with-Microserivce-Architecture/</id>
    <published>2018-08-02T07:27:15.000Z</published>
    <updated>2018-08-02T07:27:15.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Modern Technologies for Modern Web Applications</title>
    <link href="http://blog.aosabook.cc/2018/07/26/Modern-Technologies-for-Modern-Web-Applications/"/>
    <id>http://blog.aosabook.cc/2018/07/26/Modern-Technologies-for-Modern-Web-Applications/</id>
    <published>2018-07-26T07:47:59.000Z</published>
    <updated>2018-08-03T06:31:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Modern-Web-Application"><a href="#Modern-Web-Application" class="headerlink" title="Modern Web Application"></a>Modern Web Application</h1><p>当前的企业信息系统一般采用Web技术进行设计和开发，如图所示。</p><img src="http://pctozmwcv.bkt.clouddn.com//images/webtech/webapp.png"><p>这是github上的某一位普通用户开发的他所在企业的Web应用的一个简化版本，代码位于<a href="https://github.com/DimitriZhao/sinosteel" target="_blank" rel="noopener">DimitriZhao/sinosteel</a>这个git仓库。之所以从这个系统开始讲，是因为这个系统用到了当前Web应用开发的主流技术栈，包括应用框架、开发工具和管理流程等。</p><p>这个系统的总体架构如下。</p><img src="http://pctozmwcv.bkt.clouddn.com//images/webtech/architecture.png"><p>本文讲会从Web应用的历史讲起，讲讲为什么现在的Web应用会发展到这样一种架构，并针对其中各项技术做简介，希望能让读者快速理解Web应用开发框架。</p><h2 id="历史：从HTML到Web应用"><a href="#历史：从HTML到Web应用" class="headerlink" title="历史：从HTML到Web应用"></a>历史：从HTML到Web应用</h2><p>上世纪九十年代起，万维网（英语：World Wide Web，亦作“WWW”或“Web”）替代电子邮件成为了互联网最重要的应用。Tim Berners-Lee这位英国计算机科学家写了第一个浏览器供用户通过互联网访问一个个“网页”，从而快速获取各类信息，交换知识。网页用现在大家熟知的超文本标记语言（英语：HyperText Markup Language，简称：HTML）来展示内容，包括文字、图片视频、音频等，从而用令人赏心悦目的形式为大家带来了丰富多彩的内容。大多数的网页自身包含有超链接指向其他相关网页，这样通过超链接，把有用的相关资源组织在一起的集合，就形成了一个所谓的信息“网”。（以上内容总结自Wikipedia<a href="https://zh.wikipedia.org/wiki/%E4%B8%87%E7%BB%B4%E7%BD%91" target="_blank" rel="noopener">相关页面</a>）</p><p>因此九十年代到两千年这段时期，大家纷纷开始通过HTML这种语言来编撰出很多网页，并构建出一个个网站来为用户提供各类信息，以下是一个经典的Hello World程序的例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>This is a title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>HTML描述了一个网页的结构语义随着线索的呈现，也就是说HTML是定义了内容的展现方式，通过基本的HTML技术来实现网页并构建网站的过程，本质上来说是一个将一组静态内容发布出来以供用户消费的过程，当时著名软件公司发开了各类网页编辑器来进行网页开发，例如Dreamweaver、Frontpage等。静态网站的工作原理如下图所示。</p><img src="http://pctozmwcv.bkt.clouddn.com//images/webtech/static.png"><p>不过人们很快就不满足于这种每次浏览器访问都看到一样内容的静态网页技术，在静态内容的发布的基础上有了动态内容的需要。最典型的就是当年各大门户网站上都有个“访客计数器”，页面每次被访问，这个计数器就递增，从而统计来访用户数量（实际上是页面被请求的数量）。当时一个网站的价值大概与这个数字成正比，数字足够大，就能把投入到这个网站开发的钱数直接加个零卖给下家。</p><p>要实现这样一个每次访问都呈现不同内容的页面，单纯的HTML就不行了，因此出现了所谓的动态网页技术。简单来说，动态网页就是把代码潜入到页面上去，每次用户请求时执行这段代码得到结果后再把结果返回给用户。CGI是当时最为著名的用来实现这一点的黑科技。<a href="https://zh.wikipedia.org/wiki/%E9%80%9A%E7%94%A8%E7%BD%91%E5%85%B3%E6%8E%A5%E5%8F%A3" target="_blank" rel="noopener">CGI</a>全称Common Gateway Interface，中文叫做通用网关接口，可以让一个用户从网页浏览器向执行在服务器上的程序请求数据（而不是直接获取一个静态页面）。其工作原理如下图所示：</p><img src="http://pctozmwcv.bkt.clouddn.com//images/webtech/dynamic.png"><p>当年一般用Perl语言来编写CGI程序，例如这段代码基于用户通过html的form传入到变量打印一个字符串。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!perl -w  </span></span><br><span class="line"><span class="keyword">use</span> CGI <span class="keyword">qw</span>/:standard/;  </span><br><span class="line">&#123;  </span><br><span class="line">  <span class="keyword">my</span> $cgi= new CGI;  </span><br><span class="line">  <span class="keyword">print</span> $cgi-&gt;header,  </span><br><span class="line">  $cgi-&gt;start_html(<span class="string">'A Simple Example'</span>),  </span><br><span class="line">  $cgi-&gt;h1(<span class="string">'A Simple Example'</span>);  </span><br><span class="line">   </span><br><span class="line">  <span class="keyword">if</span> ( $cgi-&gt;param())  </span><br><span class="line">  &#123;  </span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Your name is "</span>,  </span><br><span class="line">    $cgi-&gt;param(<span class="string">'name'</span>);  </span><br><span class="line">  &#125;  </span><br><span class="line">   </span><br><span class="line">  $cgi-&gt;end_html();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写CGI来实现动态内容展示存在一些问题，首先CGI代码运行在一个独立的进程中，效率和安全性都堪忧，其次，写起来很麻烦，CGI规范繁杂，perl语言也相当难学。因此不久以后出现了动态页面技术，例如php、asp、jsp等。例如我们可以用jsp写这么个页面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>First JSP<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag">    <span class="attr">double</span> <span class="attr">num</span> = <span class="string">Math.random();</span></span></span><br><span class="line"><span class="tag">    <span class="attr">if</span> (<span class="attr">num</span> &gt;</span> 0.95) &#123;</span><br><span class="line">  %&gt;</span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>You'll have a luck day!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>(<span class="tag">&lt;<span class="name">%=</span> <span class="attr">num</span> %&gt;</span>)<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag">    &#125; <span class="attr">else</span> &#123;</span></span><br><span class="line"><span class="tag">  %&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Well, life goes on ... <span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>(<span class="tag">&lt;<span class="name">%=</span> <span class="attr">num</span> %&gt;</span>)<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag">    &#125;</span></span><br><span class="line"><span class="tag">  %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%= request.getRequestURI() %&gt;"</span>&gt;</span><span class="tag">&lt;<span class="name">h3</span>&gt;</span>Try Again<span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码和页面混合在一起使得页面的最终呈现是由这个页面再被用户请求时页面内的代码执行结果决定的，从而实现内容的动态展示。在此基础上，出现了更极端的技术（比如Java Servlet），直接对用户发来的请求解释并生成结果以及用来呈现结果的html。其工作原理如下图所示：</p><img src="http://pctozmwcv.bkt.clouddn.com//images/webtech/servlet.png"><p>以下为Servlet的示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Import required java libraries</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Extend HttpServlet class</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">      <span class="comment">// Do required initialization</span></span><br><span class="line">      message = <span class="string">"Hello World"</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// Set response content type</span></span><br><span class="line">      response.setContentType(<span class="string">"text/html"</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Actual logic goes here.</span></span><br><span class="line">      PrintWriter out = response.getWriter();</span><br><span class="line">      out.println(<span class="string">"&lt;h1&gt;"</span> + message + <span class="string">"&lt;/h1&gt;"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">// do nothing.</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之所以叫Servlet，是跟Java中的Applet技术对应的。Applet代表一个运行在用户端的小程序（小应用），Servlet则是运行在服务器端的一个应用。这个应用通过Web技术形式（以HTTP为通信协议，以HTML为内容格式）与用户交互，因此用Servlet或类似技术实现的Web系统，一般就称之为Web应用。</p><p>有兴趣的话可以Clone这个<a href="https://github.com/njuics/sa2017.git" target="_blank" rel="noopener">仓库</a>去运行一下ServletDemo这个例子。</p><h2 id="MVC-Web"><a href="#MVC-Web" class="headerlink" title="MVC Web"></a>MVC Web</h2><p>细心的你会发现，其实Java Servlet和早起的CGI技术原理上是一样的：用户发送一个HTTP请求到服务器，服务器端执行一段代码，代码产生结果，渲染为HTML结构的页面返回给用户。但为什么现在你主要用的时Servlet技术开发Web应用而不是CGI呢？因为现在我们在Servlet之上构造了一层MVC的设计模式。</p><p>之前那段Servlet代码中的<code>doGet()</code>函数是执行主体。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// Set response content type</span></span><br><span class="line">      response.setContentType(<span class="string">"text/html"</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Actual logic goes here.</span></span><br><span class="line">      PrintWriter out = response.getWriter();</span><br><span class="line">      out.println(<span class="string">"&lt;h1&gt;"</span> + message + <span class="string">"&lt;/h1&gt;"</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>当然这个例子中的<code>doGet</code>执行的逻辑过于简单了点，一般来说，我们在这个函数中做三件事：</p><ol><li>对方法参数对象<code>request</code>进行处理解析获得用户输入；</li><li>执行一段业务逻辑代码，对用户输入进行处理，得到一个业务层面的计算结果；</li><li>在方法参数对象<code>response</code>里讲计算结果用HTML的形式写入，让用户得到输出。</li></ol><p>如下图所示：</p><img src="http://pctozmwcv.bkt.clouddn.com//images/webtech/doget.png"><p>直接这么写的问题在于所有的输入处理、业务计算和输出组织都是混在一起的，特别时输出部分需要通过字符串拼接等方式形成一个比较负责的html页面去展示结果，为维护带来了很大的不便。程序员一般HTML写得很难看，但会做页面设计的美工又不懂得Java语言，所以直接这样写Servlet不利于分工后协作，效率极低。因此出现了将用HTML进行结果渲染这个过程独立出来的技术，一般称之为模板引擎（Template Engine），例如<a href="https://freemarker.apache.org/" target="_blank" rel="noopener">Freemarker</a>、<a href="http://velocity.apache.org/" target="_blank" rel="noopener">Velocity</a>和<a href="https://www.thymeleaf.org/" target="_blank" rel="noopener">Thymeleaf</a>等，从概念上看这种技术就是将应用的表现层独立了出来，如下图。</p><img src="http://pctozmwcv.bkt.clouddn.com//images/webtech/ui.png"><p>这么做的好处很显然，你可以单独写一个模板，让美工做得很漂亮，然后在代码运行时用运行结果去填充这个模板，渲染成一个页面，具体可以参考下面这个例子。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=ISO-8859-1"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">pageEncoding</span>=<span class="string">"ISO-8859-1"</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=ISO-8859-1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Sample Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">b</span>&gt;</span>Time Now:<span class="tag">&lt;/<span class="name">b</span>&gt;</span> $&#123;requestScope["time"]&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123; </span><br><span class="line"></span><br><span class="line">    request.setAttribute(<span class="string">"time"</span>, <span class="keyword">new</span> Date()); <span class="comment">// 'time' would be  shown on JSP page             </span></span><br><span class="line">    RequestDispatcher view = request.getRequestDispatcher(<span class="string">"WEB-INF/templates/sample.jsp"</span>);      </span><br><span class="line">    view.forward(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样一来程序员和美工就可以愉快地在一起工作了。但从程序员的角度来看，还有一部分问题没解决，就是用户输入参数的处理和业务逻辑计算代码还是在一起的，不能分别维护。因此我们再次进行分割，变成以下的样子：</p><img src="http://pctozmwcv.bkt.clouddn.com//images/webtech/mvc.png"><p>我们将业务逻辑部分再切出来，用户请求发送过来驱动Servlet的某个<code>doGet</code>方法开始运行，方法内主要负责的事时解析获得用户输入内容，将输入交给一个核心部件进行计算处理获得结果后再将结果交给模板引擎进行渲染，所以这个Servlet虽然没有做最核心的计算和漂亮页面的展示，但它控制了整个执行过程，称之为“控制器”；控制器解析出的用户输入内容被交给第二个部分进行计算处理，这个部分实际上就是系统的核心，执行的是关键性的计算过程，并得到一个计算结果，我们称之为“模型”；用来渲染这个计算结果的展示部分称之为“视图”。</p><p>仔细体会一下这样分割的好处，我想至少有这么几点：</p><ol><li>其他都不变的情况下，如果有调整页面设计，只要改HTML模板就行了，代码不用动；</li><li>如果一个核心算法要改进，那该模型的实现就行了，其他都不用动；或者说如果某个计算过程有新的实现，那让控制器调用新的模型实现就行；</li><li>如果用户输入参数改了，那我们可以在控制器层面把参数变动处理了，其他部分可以不受影响。</li></ol><p>因此这样一来，你可以找三个人分别来干这三件事。这实际上是软件技术中一直孜孜以求的一个模板，叫做<a href="https://zh.wikipedia.org/wiki/%E5%85%B3%E6%B3%A8%E7%82%B9%E5%88%86%E7%A6%BB" target="_blank" rel="noopener">“关注分离”(Separation of concerns，SOC)</a>。</p><p>下面开始进入正题：Spring MVC。</p><h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Modern-Web-Application&quot;&gt;&lt;a href=&quot;#Modern-Web-Application&quot; class=&quot;headerlink&quot; title=&quot;Modern Web Application&quot;&gt;&lt;/a&gt;Modern Web Applicati
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>About This Blog</title>
    <link href="http://blog.aosabook.cc/2018/07/26/hello-world/"/>
    <id>http://blog.aosabook.cc/2018/07/26/hello-world/</id>
    <published>2018-07-26T07:00:29.000Z</published>
    <updated>2018-07-26T07:00:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Architecting a Distributed File System with Microservices</title>
    <link href="http://blog.aosabook.cc/2018/06/19/Architecting-a-Distributed-File-System-with-Microservices/"/>
    <id>http://blog.aosabook.cc/2018/06/19/Architecting-a-Distributed-File-System-with-Microservices/</id>
    <published>2018-06-19T14:29:52.000Z</published>
    <updated>2018-07-26T07:00:29.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="总体要求"><a href="#总体要求" class="headerlink" title="总体要求"></a>总体要求</h2><p>基于微服务架构，设计一个分布式文件系统。</p><h4 id="功能要求："><a href="#功能要求：" class="headerlink" title="功能要求："></a>功能要求：</h4><ol><li>基于Spring Boot实现NameNode和DataNode两个服务，在Spring Cloud微服务平台上运行一个NameNode实例和多个DataNode实例（无需考虑NameNode单点失效问题）</li><li>NameNode提供REST风格接口与用户交互，实现用户文件上传、下载、删除，DataNode不与用户直接交互（无需考虑NameNode的IO瓶颈问题）</li><li>NameNode将用户上传文件文件拆为固定大小的存储块，分散存储在各个DataNode上，每个块保存若干副本。块大小和副本数可通过系统参数配置。</li></ol><h3 id="非功能性要求："><a href="#非功能性要求：" class="headerlink" title="非功能性要求："></a>非功能性要求：</h3><ol><li>DataNode服务可弹性扩展，每次启动一个DataNode服务NameNode可发现并将其纳入整个系统</li><li>NameNode负责检查各DataNode健康状态，需模拟某个DataNode下线时NameNode自动在其他DataNode上复制（迁移）该下线服务原本保存的数据块</li><li>NameNode在管理数据块存储和迁移过程中应实现一定策略尽量保持各DataNode的负载均衡</li><li>提供一个namenode上的前端页面</li></ol><h3 id="接口示例："><a href="#接口示例：" class="headerlink" title="接口示例："></a>接口示例：</h3><ul><li><code>GET /</code> - 列出文件系统<code>/</code>目录内容</li><li><code>GET /user1/a.docx</code> - 下载<code>/user1/a.docx</code>文件</li><li><code>PUT /user2/b.zip</code> - 上传<code>b.zip</code>文件到<code>/user2</code>目录</li><li><code>DEL /user2/b.zip</code> - 删除<code>/user2</code>目录下<code>b.zip</code>文件</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p><a href="https://github.com/njuics/dev-mdfs" target="_blank" rel="noopener">https://github.com/njuics/dev-mdfs</a></p><h3 id="工程简介"><a href="#工程简介" class="headerlink" title="工程简介"></a>工程简介</h3><p>示例代码为一个Maven构建管理的Java工程，工程包含若干模块，每个模块又是一个Maven管理的Java工程，各自实现一个微服务实体，包括微服务架构中的基础设施服务（如Config Service、Discovery Service和Tracing Service等）。顶层工程除POM文件外不包含其他源代码，该POM文件定义了各个模块共享的Maven属性、依赖和插件等。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.14.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>info.nemoworks.mdfs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mdfs-system<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>mdfs-config-server<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">assertj.version</span>&gt;</span>3.10.0<span class="tag">&lt;/<span class="name">assertj.version</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-sleuth-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;sleuth.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            ...</span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   ...</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="https://maven.apache.org/pom.html" target="_blank" rel="noopener">POM</a> stands for “Project Object Model”. It is an XML representation of a Maven project held in a file named pom.xml. </p></blockquote><h4 id="Config-Server"><a href="#Config-Server" class="headerlink" title="Config Server"></a>Config Server</h4><blockquote><p><a href="https://cloud.spring.io/spring-cloud-config/" target="_blank" rel="noopener">Spring Cloud Config</a> provides server and client-side support for externalized configuration in a distributed system. With the Config Server you have a central place to manage external properties for applications across all environments.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigServerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConfigServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们通过<code>@EnableConfigServer</code>直接让Spring Boot启动一个Config Server。Spring Boot是个神器，会自动按你这个Annotation运行一个特定的<code>SpringBootApplication</code></p><blockquote><p><a href="https://spring.io/projects/spring-boot" target="_blank" rel="noopener">Spring Boot</a> makes it easy to create stand-alone, production-grade Spring based Applications that you can “just run”.</p></blockquote><p>注意，Spring Boot目前最新版是<code>2.0.x</code>，但最新版与Spring Cloud 的最新版       <code>Edgware.SR3</code>似乎尚不兼容，所以我们还是用<code>1.5.14.RELEASE</code>这个版本的Spring Boot。请注意看顶层POM文件内容。</p><p>与Spring Petclinic的Microserice版本不同，为了避免麻烦，我将Config Server提供的config数据放在<code>resources</code>目录下，你可以看到一堆yml文件。其中的<code>application.yml</code>是当前Config Server的应用运行参数</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">server.port:</span> <span class="number">8888</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">     name:</span> <span class="string">config-server</span></span><br><span class="line"><span class="attr">  profiles:</span></span><br><span class="line"><span class="attr">     active:</span> <span class="string">native</span></span><br></pre></td></tr></table></figure><p><code>profiles.active=native</code>代表用本地文件作为config来源，这个本地文件默认会搜索classpath（resources目录是在classpath中的），或者你通过<code>file:///...</code>去指定，具体参考<a href="https://cloud.spring.io/spring-cloud-config/multi/multi__spring_cloud_config_server.html" target="_blank" rel="noopener">Spring Cloud文档</a>。</p><p>其他yml文件为每个其他服务对应的参数配置，启动Config Server后可以用curl命令看看内容是否正确。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://localhost:8888/discovery-server/default</span><br></pre></td></tr></table></figure><h4 id="Discovery-Server"><a href="#Discovery-Server" class="headerlink" title="Discovery Server"></a>Discovery Server</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiscoveryServerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(DiscoveryServerApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如同Config Server， 我们通过<code>@EnableEurekaServer</code>直接让Spring Boot启动一个 Discovery Server，或者叫Service Registry。这个Server实际上是Netflix这个不务正业的视频网站开发的一个微服务平台中的一个组件<code>Eureka</code>，Spring Cloud集成了这个组件。Eureka这个词源自希腊，用以表达发现某件事物、真相时的感叹词。关于这个服务，请参考Spring的文档。</p><blockquote><p><a href="https://spring.io/blog/2015/01/20/microservice-registration-and-discovery-with-spring-cloud-and-netflix-s-eureka" target="_blank" rel="noopener">A service registry</a> is a phone book for your microservices. Each service registers itself with the service registry and tells the registry where it lives (host, port, node name) and perhaps other service-specific metadata - things that other services can use to make informed decisions about it. Clients can ask questions about the service topology (“are there any ‘fulfillment-services’ available, and if so, where?”) and service capabilities (“can you handle X, Y, and Z?”). You probably already use a technology that has some notion of a cluster (Cassandra, Memcached, etc.), and that information is ideally stored in a service registry. There are several popular options for service registries. Netflix built and then open-sourced their own service registry, Eureka. Another new, but increasingly popular option is Consul. We’ll look principally at some of the integration between Spring Cloud and Netflix’s Eureka service registry.</p></blockquote><p>注意，你如果使用版本号大于<code>8</code>的Java环境可能会导致错误。具体原因和解决方法以后再说。</p><h3 id="TBC"><a href="#TBC" class="headerlink" title="TBC"></a>TBC</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;总体要求&quot;&gt;&lt;a href=&quot;#总体要求&quot; class=&quot;headerlink&quot; title=&quot;总体要求&quot;&gt;&lt;/a&gt;总体要求&lt;/h2&gt;&lt;p&gt;基于微服务架构，设计一个分布式文件系统。&lt;/p&gt;
&lt;h4 id=&quot;功能要求：&quot;&gt;&lt;a href=&quot;#功能要求：&quot; class
      
    
    </summary>
    
    
  </entry>
  
</feed>
